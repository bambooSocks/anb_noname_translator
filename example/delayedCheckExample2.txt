
[
	Local "A" (ANew "A" ["N1", "N2"]),
	Comm "A" "B" (Comp "pair" [Atom "N1", Comp "h" [Atom "N1", Atom "N2"]]),
	Comm "B" "A" (Atom "ok"),
	Comm "A" "B" (Atom "N2"),
	Comm "B" "A" (Atom "ok")
]

# in AnnB

Sigma0:
	ok

Actions:
A: new N1, N2
A -> B: pair(N1, h(N1, N2))
B -> A: ok
A -> B: N2
B -> A: ok


# in NN

have a state per agent and extractors for each element

Cells:
sessionTxn[S] := T1
rcvX3[S] := 0
rcvX6[S] := 0
rcvX7[S] := 0
rcvX8[S] := 0

Transaction T1:
	new(S).
	new(N1,N2).
	send(pair(N1,h(N1,N2))).
	send(S).
	nil

Transaction T2:
	receive(X3).
	receive(S).
	T := sessionTxn[S].
	if (T = T2) then
		rcvX3[S] := X3.
		try X4=proj1(X3) in
			try X5=proj2(X3) in // X5 has to be stored
				send(ok).
				send(S).
				nil
			catch nil
		catch nil
	else nil

Transaction T3:
	receive(X6).
	receive(S).
	T := sessionTxn[S].
	if (T = T3) then
		rcvX6[S] := X6.
		send(N2).
		send(S).
		nil
	else nil

Transaction T4:
	receive(X7).
	receive(S).
	T := sessionTxn[S].
	if (T = T4) then
		rcvX7[S] := X7.
		if X5=h(X4,X7) then // X5 has to be retrieved
			send(ok).
			send(S).
			nil
		else nil
	else nil

Transaction T5:
	receive(X8).
	receive(S).
	T := sessionTxn[S].
	if (T = T5) then
		rcvX8[S] := X8.
		nil
	else nil